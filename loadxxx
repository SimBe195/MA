
DB:=LatticeDatabase();

for i in [1..75] do 
	L:=Lattice(DB,24,i); 
	if Determinant(L) eq 3^12 and Minimum(L) eq 6 then 
		L0:=L; 
	end if; 
end for;

L:=Lattice("E",8);
L:=LatticeWithGram(GramMatrix(L));

A:=AutomorphismGroup(L);
CA:=ConjugacyClasses(A);
CA;


XX:=[]; 
for c in CA do 
	if c[1] eq 8 and c[3]^4 eq CA[2][3] then 
		Append(~XX,c[3]); 
	end if; 
end for; 

XX;

U:=sub<A| XX[1]>;

P<x>:=PolynomialRing(GF(5));
Factorization(x^8-1);

SU:=Sublattices(U,[3,5]: Levels:=2);

LL:=[]; 
F:=GramMatrix(L); 

for s in SU do 
	B:=BasisMatrix(s); 
	S:=LatticeWithGram(B*F*Transpose(B)); 
	if Determinant(S) eq 15^4 and Minimum(S) ge 6 then 
		Append(~LL,S); 
		print Minimum(S);  
	end if; 
end for; 

#LL;

SL:=[];
for L in LL do 
	neu := true; 
	for s in SL do 
		if IsIsometric(s,L) then 
			neu:=false; 
			break; 
		end if; 
	end for; 

	if neu then 
		Append(~SL,L); 
	end if; 
end for;

#SL;

Order(AutomorphismGroup(SL[1]));
Order(AutomorphismGroup(SL[2]));
Order(AutomorphismGroup(SL[3]));

ASL:=AutomorphismGroup(SL[2]);
SL[2];
Minimum(SL[2]);
D:=Dual(SL[2]);
IsIsometric(SL[2],D);
D:=Dual(SL[2]: Rescale:=false);
L2:=sub<D | SL[2], 3*5*D>;
Minimum(L2);

F2:=GramMatrix(L2);
F2;
