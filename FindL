limit := 150000;

dimlist := 	[16,	32,		12,		36,		36,		16,		24,		24,		24,		32,		18,		12,		20,		12];
llist := 	[2,		2,		3,		3,		3,		5,		5,		5,		6,		6,		7,		11,		11,		14];
ilist := 	[1,		1,		1,		1,		2,		2,		1,		4,		1,		1,		3,		1,		1,		1];
flist := 	[1,		4,		2,		1,		1,		2,		1,		2,		5,		1,		1,		1,		1,		1];
dlist := 	[4,		11,		3,		28,		42,		3,		20,		20,		8,		8,		14,		12,		12,		8];
plist := 	[7,		3,		5,		2,		2,		7,		2,		3,		5,		7,		2,		2,		5,		3];
minlist := 	[4,		6,		4,		8,		8,		6,		8,		8,		8,		10,		8,		8,		12,		8];


for j in [1..#dimlist] do
	dim := dimlist[j];
	l := llist[j];
	index := ilist[j];
	d := dlist[j];
	p := plist[j];
	min := minlist[j];

	det := l^(Integers() ! (dim/2));

	I := eval Read(Sprintf("%o_mod/%o_dim/I_%o", l, dim, index));

	for f in [1..flist[j]] do
		F := eval Read(Sprintf("%o_mod/%o_dim/F_%o_%o", l, dim, index, f));
		M := OrthogonalSum(Dual(I:Rescale:=false) meet (1/p*I), Dual(F:Rescale:=false) meet (1/p*F));

		A := AutomorphismGroup(F);
		CA := ConjugacyClasses(A);

		X := [];
		for c in CA do
			if c[1] eq d then
				Append(~X, c[3]);
			end if;
		end for;

		counter := 0;

		for a in X do
			"New possible sigma.";
			sigma := DiagonalJoin(CompanionMatrix(CyclotomicPolynomial(d*p)), a);
			SU := Sublattices([sigma], p : Limit := limit);

			G := KMatrixSpace(Rationals(), dim, dim) ! GramMatrix(M);
			printf "%o sublattices to check.\n", #SU;
			for i in [1..#SU] do
				s:= SU[i];
				if i mod 10000 eq 0 then
					i;
				end if;
				B := KMatrixSpace(Rationals(), dim, dim) ! BasisMatrix(s);
				L := LatticeWithGram(B*G*Transpose(B));

				if Determinant(L) eq det and Minimum(L) ge min then
					"Extremal lattice found!!";
					counter +:= 1;
					PrintFileMagma(Sprintf("%o_mod/%o_dim/L_%o_%o_%o", l, dim, index, f, counter), L);
				end if;
			end for;

		end for;
	end for;
end for;