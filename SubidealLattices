
//phi(m) = 16
l := 3;
Lat := [];

for phim in [16,18,20,22] do
    printf "Phi(m) = %o\n", phim;
    for m in EulerPhiInverse(phim) do
        
        if m mod 4 eq 2 then
            continue;
        end if;

        printf "m = %o\n", m;

        K<z> := CyclotomicField(m);
        F:=sub<K|z+1/z>;
        ZK:=Integers(K);

        A := ClassesModGalois(K);

        U, UnitGens, M := TotPosUnits(F);
        U := RedByNorm(U, K, F);


        for i in [1..#Factorization(m)] do
            p := Factorization(m)[i][1];
            printf "p = %o\n", p;
            d := m / p;

            N := Integers() ! (phim / (p-1));

            for s := N mod 2 to Min({N, 24-phim}) by 2 do
                for k := Max({0, EulerPhi(m)-12}) to Min({12, EulerPhi(m)}) by 2 do
                    B := DivisorsWithNorm(ideal<ZK|p*l>, p^s*l^k);

                    for J in A do
                        JJ := (J*ConjIdeal(J,K)*Different(ZK))^(-1);

                        for I in B do
                            JJI := JJ*I;
                            pos, alpha_1 := PosGenInF(JJI, UnitGens, M, K, F);

                            if not pos then 
                                continue;
                            end if;

                            for u in U do
                                alpha := K ! u*alpha_1;
                                L := LatFromIdeal(J, alpha, K);
                            end for;

                            new := true;
                            for M in Lat do
                                if IsIsometric(M[1], L) then
                                    new := false;
                                    break;
                                end if;
                            end for;

                            if new then
                                printf "Found a new lattice! Determinant: %o^%o*%o^%o\n", p,s,l,k;
                                Append(~Lat, <L,p,d,s,k>);
                            end if;
                        end for;
                    end for;
                end for;
            end for;
        end for;

        print "";

    end for;
end for;

#Lat;