
function TotallyPositive(x)
// Checks whether x is a totally positiv element, i.e. if r(x) > 0 for all real embeddings r.
// Input:
//  x : FldNumElt       : Element for which positivity should be checked..
//
// Output:
//  BoolElt             : true iff x is totally positive.           

    for r in RealEmbeddings(x) do
        if not (r gt 0) then
            return false;
        end if;
    end for;

    return true;
end function;


function ConjIdeal(I, K)
// Computes the complex conjugate of an Z_K-Ideal I.
// Input:
//  K : FldNum          : Field in which the complex conjugation takes place.
//  I : RngIdl          : Z_K-Ideal for which complex conjugate shall be computed.

// Output:
//  RngIdl              : Z_K-Ideal which is the complex conugate of I.

    gens := [];
    for g in Generators(I) do
        Append(~gens, ComplexConjugate(K ! g));
    end for;
    return ideal<Integers(K)|gens>;
end function;


function ClassesModGalois(K)    // Credit to Michael Juergens.
// Computes a representation system of the class group of Z_K modulo the action of the Galois-group of K/Q.
// Input :
//  K : FldNum      : Numberfield for which the representative system shall be computed.
 
// Output :
//  SeqEnum         : List of representatives of the class group that are independent modulo Galois.
    
    ZK := Integers(K);
    Cl, mCl := ClassGroup(ZK: Bound := 1000);

    ClModGal:=[];
    for a in Cl do
        A:=mCl(a);
        new:=true;
        for f in Automorphisms(K) do
            if Inverse(mCl)(ideal<ZK| [f(x) : x in Generators(A)] >) in ClModGal then 
                new:=false; 
                break; 
            end if;
        end for;
        if new then Append(~ClModGal,a); end if;
    end for;

    return [mCl(g) : g in ClModGal];

end function;


function TotPosUnits(F)
// Computes a list of totally positive units of Z_F reduced by squares.
// Input:
// F : FldNum               : Totally real number-field for whose ring of integers the units shall be computed.

// Output:
// SeqEnum, SeqEnum, Mtrx   : List of square-free, totally positive units inside Z_F; list of generators of the unit group of Z_F; matrix whose entries encode the sign of the real embeddings of the unit-generators.

    ZF := Integers(F);
    dim := #Basis(F);
    Units, mUnits := pFundamentalUnits(ZF, 2);
    UnitGens := [F | mUnits(Units.i) : i in [1..dim]];

    M := KMatrixSpace(GF(2), dim, dim) ! 0;
    for i in [1..dim] do
        r := RealEmbeddings(UnitGens[i]);

        for j in [1..dim] do
            if not (r[j] gt 0) then
                M[i][j] := 1;
            end if;
        end for;

    end for;

    MKernel := KernelMatrix(M);

    TotPosBasis := [];
    for i in [1..NumberOfRows(MKernel)] do
        a := F ! 1;
        for j in [1..dim] do
            if MKernel[i][j] eq 1 then
                a := a * UnitGens[j];
            end if;
        end for;
        Append(~TotPosBasis, a);
    end for;

    TotPos := [];

    for S in Subsets({1..#TotPosBasis}) do
        a := F ! 1;
        for i in S do
            a *:= TotPosBasis[i];
        end for;
        Append(~TotPos, a);
    end for;

    return TotPos, UnitGens, M;

end function;


function RedByNorm(TotPos, K, F)
// Takes list of totally positive units and reduces it modulo {c*conj(c) | c in ZK}.
// Input:
//  TotPos : SeqEnum            : List of totally positive elements which shall be reduced.
//  ZK : RngOrd                 : Ring of integers for which the norms are tested.

// Output:
//  SeqEnum                     : Sublist of TotPos whose elements are independent by norm.

    U := [];    
    ZKF := Integers(RelativeField(F,K));
    for u in TotPos do
        new := true;

        for v in U do

            if NormEquation(ZKF, ZKF ! (u/v)) then
                new := false;
                break;
            end if;

        end for;

        if new then
            Append(~U, u);
        end if;
    end for;

    return U;

end function;

function GenInF(I, K, F) // Credit to Michael Juergens
// Finds a generator of the ideal I that lies in F or returns false if there is none.
// Input:
//  I : RngIdl          : ZK-ideal for which a generator in F is searched.
//  K : FldNum          : Number-field that I is an ideal in.
//  F : FldNum          : Totally-real subfield of K in which a generator is searched.

// Output:
// BoolElt, FldNumElt   : true iff a generator in F exists; generator if one is found.

    RelKF:=RelativeField(F,K);
    ZK := Integers(K);
    ZF := Integers(F);

    Shape:=true; 
    ImeetF:=ideal<ZF|1>;
    SplitIdeals:=[];

    for i in [1..#Factorization(I)] do
        tup := Factorization(I)[i];
        P:=tup[1];
        nuP:=tup[2];
     
        RelP:=ideal<Integers(RelKF)|Generators(P)>;
        Relp:=Norm(RelP);
        
        p:=MinimalInteger(P);
        P_F:=Factorization(ideal< ZF | p >)[1][1];
        r := #Factorization(ideal< ZK | Generators(P_F)>);
        e := Factorization(ideal< ZK | Generators(P_F)>)[1][2];

        if r eq 1 and e eq 1 then   // Relative inert
            p:=Factorization(ideal<ZF | Generators(Relp)>)[1][1];
            ImeetF*:=p^nuP; 
        else 
            if r eq 1 and e eq 2 then // Relative ramified
                if not IsEven(nuP) then Shape:=false; break; end if; 
                p:=Factorization(ideal<ZF | Generators(Relp)>)[1][1];
                ImeetF*:=p^Ceiling(nuP/2); 
            else 
                if r eq 2 and e eq 1 then // Relative split
                    if Valuation(I,P) ne Valuation(I,ConjIdeal(P,K)) then Shape:=false; break; end if; 
                    if not ConjIdeal(P,K) in SplitIdeals then 
                        p:=Factorization(ideal<Integers(F) | Generators(Relp)>)[1][1];
                        ImeetF*:=p^nuP; 
                        Append(~SplitIdeals,P);
                        Append(~SplitIdeals,ConjIdeal(P,K)); 
                    end if; 
                end if;
            end if;                  
        end if;
    end for;

    if not Shape then
        return false, _;
    end if;

    return IsPrincipal(ImeetF);

end function;

function PosGen(alpha, UnitGens, M)
// Finds a totally positive generator of a principal ideal alpha*Z_K
// Input:
//  alpha : FldNumElt   : Generator of the ideal.
//  M : Mtrx            : Matrix whose entries encode the sign of the embeddings of the unit-group-generators as in TotPos
//  UnitGens : SeqEnum  : List of generators of the unit-group of Z_F as in TotPos.
    
// Output:
//  BoolElt, FldNumElt  : true iff a totally positive generator exists; generator if one is found.

    dim := NumberOfRows(M);

    a := KMatrixSpace(GF(2), 1, dim) ! 0;
    r := RealEmbeddings(alpha);
    for i in [1..dim] do
        if not (r[i] gt 0) then
            a[1][i] := 1;
        end if;
    end for;

    solvable, MSol := IsConsistent(M, a);

    if not solvable then
        return false, _;
    end if;

    gen := alpha;

    for j in [1..dim] do
        if MSol[1][j] eq 1 then
            gen *:= UnitGens[j];
        end if;
    end for;

    return true, gen;

end function;


function PosGenInF(I, UnitGens, M, K, F)
// Combines GenInF and PosGen into 1 function
// Input/Output:
//  See GenInF and PosGen
	
	genExists, alpha := GenInF(I, K, F);
	if genExists then
		return PosGen(alpha, UnitGens, M);
	end if;

	return false, _;

end function;


function DivisorsWithNorm(I, n)
// Construct divisors of I with norm n    
// Input:
//  l : RngIdl          : See above.
//  n : RngIntElt       : See above.


// Output:
//  SeqEnum             : List of divisors.

    norm := Round(n);

    if norm eq Norm(I) then
        return [I];
    end if;


    Fact := Factorization(I);

    p := Fact[1][1];
    s := Fact[1][2];
    a := Norm(p);

    A := [];

    if #Fact eq 1 then
        if norm mod a eq 0 then
            e := Integers() ! (norm/a);
            if e le s then
                return [p^e];
            end if;
        end if;

        return [];
    end if;

    for j in [0..s] do
        if norm mod (a^j) eq 0 then
            B := DivisorsWithNorm(I*p^(-s), norm/(a^j));
            for J in B do
                Append(~A, p^j*J);
            end for;
        end if;
    end for;

    return A;
    
end function;


function RedByIso(Lattices)
// Takes a list of lattices and returns the sublist of non-isometric elements.
// Input:
//  Lattices : SeqEnum      : List of lattices that shall be reduced.

// Output:
//  SeqEnum                 : Reduced list for which the elements are pairwise non-isometric    

    LatticesReduced := [* *];
    Minima := [* *];
    NumShortest := AssociativeArray();
    Genera := AssociativeArray();


    for i in [1..#Lattices] do
        L := Lattices[i][1];

        min_computed := false;
        minimum := 0;

        shortest_computed := false;
        shortest := 0;

        new := true;
        for j in [1..#LatticesReduced] do
            M := LatticesReduced[j][1];

            if not min_computed then
                min_computed := true;
                minimum := Min(L);
            end if;

            if not IsDefined(Minima, j) then
                Minima[j] := Min(M);
            end if;

            if minimum ne Minima[j] then
                continue;
            end if;


            if not shortest_computed then
                shortest_computed := true;
                shortest := #ShortestVectors(L);
            end if;

            if not IsDefined(NumShortest, j) then
                NumShortest[j] := #ShortestVectors(M);
            end if;

            if shortest ne NumShortest[j] then
                continue;
            end if;


            if IsIsometric(L, M) then
                new := false;
                break;
            end if;
        end for;

        if new then
            Append(~LatticesReduced, Lattices[i]);

            NewIndex := #LatticesReduced;
            if min_computed then
                Minima[NewIndex] := minimum;
            end if;

            if shortest_computed then
                NumShortest[NewIndex] := shortest;
            end if;

        end if;
    end for;

    return LatticesReduced;

end function;


function LatFromIdeal(J, alpha, K)
// Constructs a lattice given a fractional ideal in K and a totally positive alpha.
// Input:
//	J : RngIdl			: Fractional ideal.
//  alpha : FldNumElt	: Totally positive element in the maximal real subfield of K.
//  K : FldNum 			: Cyclotomic number field.

// Output:
// L : Lat 				: Lattice constructed from J and alpha.

	dim := #Basis(K);
	z := PrimitiveElement(K);

	JGenerators := KMatrixSpace(Rationals(), #Generators(J)*dim, dim) ! 0;
    g1 := K!Generators(J)[1];
    if #Generators(J) gt 1 then
        g2 := K!Generators(J)[2];
    end if;

    for i in [1..dim] do
        JGenerators[i] := Vector(Rationals(), dim, Eltseq(g1*z^(i-1)));
        if #Generators(J) gt 1 then
            JGenerators[dim+i] := Vector(Rationals(), dim, Eltseq(g2*z^(i-1)));
        end if;
    end for;


    ZBaseVecs := Basis(RowSpace(JGenerators));
    ZBase := [];
    for i in [1..dim] do
        b := K ! 0;
        for j in [1..dim] do
            b +:= ZBaseVecs[i][j]*z^(j-1);
        end for;
        Append(~ZBase, b);
    end for;

    Gram := KMatrixSpace(Rationals(), dim, dim) ! 0;
    for i in [1..dim] do
        for j in [1..dim] do
            Gram[i][j] := Trace(alpha*ZBase[i]*ComplexConjugate(ZBase[j]));
        end for;
    end for;

    Gram := LLLGram(Gram);

    L := LatticeWithGram(Gram);

    return L;

end function;


procedure ModLatProc(l, m, red, ~UnitGensMap, ~MMap, ~UMap, ~AMap, ~ResultLattices)
// Finds all l-modular ideal-lattices in Q(zeta_m).
// Input:
//  l : RngIntElt               : See above.
//  m : RngIntElt               : See above.
//  red : BoolElt               : true if the list of lattices shall be reduced by isometry.
//  U : SeqEnum                 : (Optional) List of totally positive Units in F reduced by norm to avoid repeated computation
//  A : SeqEnum                 : (Optional) Class Group of K modulo Galois-Group is given as parameter to avoid repeated computation

//Output:
//  SeqEnum             : List of found lattices.
    
    K<z> := CyclotomicField(m);
    F := sub<K | z + 1/z>;

    ZK := Integers(K);
    ZF := Integers(F);

    dim := EulerPhi(m);

    if not IsDefined(UnitGensMap, m) then
        TotPos, UnitGens, M := TotPosUnits(F);
        U := RedByNorm(TotPos, K, F);

        UnitGensMap[m] := UnitGens;
        MMap[m] := M;
        UMap[m] := U;
    else
        UnitGens := UnitGensMap[m];
        M := MMap[m];
        U := UMap[m];
    end if;

    if not IsDefined(AMap, m) then
        A := ClassesModGalois(K);
        AMap[m] := A;
    else
        A := AMap[m];
    end if;


    B := DivisorsWithNorm(ideal<ZK|l>, l^(dim/2));

    Lattices := [* *];

    for J in A do
        JJ := (J * ConjIdeal(J,K) * Different(ZK))^(-1);
        for I in B do
            JJI := JJ * I;
            pos, alpha_1 := PosGenInF(JJI, UnitGens, M, K, F);

            if not pos then
                continue;
            end if;

            for u in U do
                alpha := K ! (u * alpha_1);
                L := LatFromIdeal(J, alpha, K);

                Append(~Lattices, <L, J, alpha, m, dim, l>);
            end for;
        end for;
	end for;

    if red then
        Lattices := RedByIso(Lattices);
    end if;


    ResultLattices := Lattices;

end procedure;


function ModLat(l, m, red)
    Lat := [];
    UnitGensMap := AssociativeArray();
    MMap := AssociativeArray();
    UMap := AssociativeArray();
    AMap := AssociativeArray();
    ModLatProc(l, m, red, ~UnitGensMap, ~MMap, ~UMap, ~AMap, ~Lat);
    
    return Lat;
end function;


procedure ModLatDimProc(l, dim, red, ~UnitGensMap, ~MMap, ~UMap, ~AMap, ~ResultLattices)
// Computes list of all (non-isometric) l-modular ideal-lattices in a given dimension.
// Input:
//  l : RntIntElt       : Degree of modularity.
//  dim : RngIntElt     : Dimension that the lattices should have.
//  red : BoolElt       : true if the list of lattices shall be reduced by isometry.

// Output:
//  SeqEnum             : List of tuples for which the first entries are the non-isometric modular lattices and the second entries are the corresponding ms.

    ms := [];
    for m in EulerPhiInverse(dim) do
        if not (m mod 4 eq 2) then
            Append(~ms, m);
        end if;
    end for;

    LatList := [* *];

    for m in ms do
        Lat := [* *];
        ModLatProc(l, m, red, ~UnitGensMap, ~MMap, ~UMap, ~AMap, ~Lat);

        LatList cat:= Lat;
    end for;

    if red then
        LatList := RedByIso(LatList);
    end if;

    ResultLattices := LatList;

end procedure;


function ModLatDim(l, dim, red)
    Lat := [];
    UnitGensMap := AssociativeArray();
    MMap := AssociativeArray();
    UMap := AssociativeArray();
    AMap := AssociativeArray();
    ModLatDimProc(l, dim, red, ~UnitGensMap, ~MMap, ~UMap, ~AMap, ~Lat);
    
    return Lat;
end function;


function IsExtremal(L, l)
// Tests whether a given l-modular lattice L is extremal.
// Input:
//  L : Lat         : Lattice that is tested for extremality.
//  l : RngIntElt   : Degree of modularity of l

// Output:
//  BoolElt         : true iff L is extremal.

    n := #Basis(L);
    min := Min(L);

    if l eq 1 then
        return min ge 2 + 2*Floor(n/24);
    end if;
    if l eq 2 then
        return min ge 2 + 2*Floor(n/16);
    end if;
    if l eq 3 then
        return min ge 2 + 2*Floor(n/12);
    end if;
    if l in {5,6} then
        return min ge 2 + 2*Floor(n/8);
    end if;
    if l eq 7 then
        return min ge 2 + 2*Floor(n/6);
    end if;
    if l in {11,14,15} then
        return min ge 2 + 2*Floor(n/4);
    end if;
    if l eq 23 then
        return min ge 2 + 2*Floor(n/2);
    end if;

    return false;

end function;

procedure ExModLatProc(l, m, red, ~UnitGensMap, ~MMap, ~UMap, ~AMap, ~ResultLattices)
// Computes all extremal l-modular ideal-lattices in Q(zeta_m).
// Inputs:
//  l : RngIntElt       : See above.
//  m : RngIntElt       : See above.
//  red : BoolElt       : true iff the returned list of lattices shall be reduced by isometry.

// Outputs:
//  SeqEnum             : List of extremal lattices.

    Lat := [* *];
    ModLatProc(l, m, red, ~UnitGensMap, ~MMap, ~UMap, ~AMap, ~Lat);
    ExLat := [* *];

    for i in [1..#Lat] do
        if IsExtremal(Lat[i][1], l) then
            Append(~ExLat, Lat[i]);
        end if;
    end for;

    if red then
        ExLat := RedByIso(ExLat);
    end if;

    ResultLattices := ExLat;

end procedure;


function ExModLat(l, m, red)
    Lat := [];
    UnitGensMap := AssociativeArray();
    MMap := AssociativeArray();
    UMap := AssociativeArray();
    AMap := AssociativeArray();
    ExModLatProc(l, m, red, ~UnitGensMap, ~MMap, ~UMap, ~AMap, ~Lat);
    
    return Lat;
end function;


procedure ExModLatDimProc(l, dim, red, ~UnitGensMap, ~MMap, ~UMap, ~AMap, ~ResultLattices)
// Computes all extremal l-modular ideal-lattices of a given dimension.
// Inputs:
//  l : RngIntElt       : See above.
//  dim : RngIntElt     : Dimension of the lattices.
//  red : BoolElt       : true iff the returned list of lattices shall be reduced by isometry.

// Outputs:
//  SeqEnum             : List of extremal lattices.

    Lat := [* *];
    ModLatDimProc(l, dim, red, ~UnitGensMap, ~MMap, ~UMap, ~AMap, ~Lat);
    ExLat := [* *];

    for L in Lat do
        if IsExtremal(L, l) then
            Append(~ExLat, L);
        end if;
    end for;

    if red then
        ExLat := RedByIso(ExLat);
    end if;

    ResultLattices := ExLat;

end procedure;


function ExModLatDim(l, m, red)
    Lat := [];
    UnitGensMap := AssociativeArray();
    MMap := AssociativeArray();
    UMap := AssociativeArray();
    AMap := AssociativeArray();
    ExModLatDimProc(l, m, red, ~UnitGensMap, ~MMap, ~UMap, ~AMap, ~Lat);
    
    return Lat;
end function;


// List of functions:
//  TotallyPositive(x)
//  ConjIdeal(I, K)
//  ClassesModGalois(K)
//  TotPosUnits(F)
//  RedByNorm(TotPos, K, F)
//  GenInF(I, K, F)
//  PosGen(alpha, UnitGens, M)
//  PosGenInF(I, UnitGens, M, K, F)
//  DivisorsWithNorm(I, n)
//  RedByIso(Lattices)
//  LatFromIdeal(J, alpha, K)
//  ModLatProc(l, m, red, ~UnitGensMap, ~MMap, ~UMap, ~AMap, ~ResultLattices)
//  ModLat(l, m, red)
//  ModLatDimProc(l, dim, red, ~UnitGensMap, ~MMap, ~UMap, ~AMap, ~ResultLattices)
//  ModLatDim(l, dim, red)
//  IsExtremal(L, l)
//  ExModLatProc(l, m, red, ~UnitGensMap, ~MMap, ~UMap, ~AMap, ~ResultLattices)
//  ExModLat(l, m, red)
//  ExModLatDimProc(l, dim, red, ~UnitGensMap, ~MMap, ~UMap, ~AMap, ~ResultLattices)
//  ExModLatDim(l, m, red)
//  