

nlist :=	[16,		16,			32,			32,			12,			12,			24,			36,			36,			36,			36,			36,			16,			24,			24,			24,			24,			32,			6,			12,			12,			18,			18,			24,			24,			30,			12,			12,			20,			12,			12,			28,			6,			12];
llist :=	[2,			2,			2,			2,			3,			3,			3,			3,			3,			3,			3,			3,			5,			5,			5,			5,			6,			6,			7,			7,			7,			7,			7,			7,			7,			7,			11,			11,			11,			14,			15,			15,			23,			23];
detlist := 	[2^2*7^2,	2^2*3^4,	2^6*3^10,	2^7*7^4,	3^2*5^2,	3^2*2^4,	3^4*2^8,	2^12*3^6,	2^12*3^6,	3^2*17^2,	3^2*5^4,	3^2*5^4,	5^2*7^2,	2^8*5^4,	3^8*5^4,	5^2*11^2,	5^4*6^4,	6^4*7^4,	2^2*7,		2^4*7^2,	3^4*7^2,	3^6*7^3,	2^6*7^3,	3^8*7^4,	3^8*7^4,	3^8*7^7,	2^4*11^2,	3^4*11^2,	5^4*11^2,	3^4*14^2,	2^4*15^2,	7^4*15^2,	2^2*23,		3^4*23^2];
primeslist := [[2,7],	[2,3],		[2,3],		[2,7],		[3,5],		[2,3],		[2,3],		[2,3],		[2,3],		[3,17],		[3,5],		[3,5],		[5,7],		[2,5],		[3,5],		[5,11],		[2,3,5],	[2,3,7],	[2,7],		[2,7],		[3,7],		[3,7],		[2,7],		[3,7],		[3,7],		[3,7],		[2,11],		[3,11],		[5,11],		[2,3,7],		[2,3,5],	[3,5,7],	[2,23],		[3,23]];
dimlist := 	[4,			4,			12,			8,			4,			4,			8,			12,			12,			4,			4,			4,			4,			8,			8,			4,			8,			8,			2,			4,			4,			6,			6,			8,			8,			14,			4,			4,			4,			4,			4,			4,			2,			4];
dlist :=	[4,			13,			11,			8,			3,			8,			5,			28,			42,			3,			24,			24,			3,			20,			20,			4,			8,			8,			4,			12,			8,			7,			14,			16,			20,			20,			12,			8,			12,			8,			12,			12,			4,			8];
Ilist :=	[1,			2,			1,			2,			1,			2,			1,			1,			2,			3,			4,			5,			2,			1,			4,			6,			1,			1,			1,			1,			2,			1,			3,			2,			4,			4,			1,			2,			1,			1,			1,			1,			1,			2];
minlist := 	[4,			4,			6,			6,			4,			4,			6,			8,			8,			8,			8,			8,			6,			8,			8,			8,			8,			10,			4,			6,			6,			8,			8,			10,			10,			12,			8,			8,			12,			8,			8,			16,			8,			14];

limit := 250000;

DB := LatticeDatabase();

for j in [1..#nlist] do

	"\n//////////////////////////////";
	printf "////////// Number %o //////////\n",j;
	"//////////////////////////////";

	counter := 1;

	Lat := [];
	NumShortest := [];
	AutoSize := [];

	n := nlist[j];
	l := llist[j];
	det := detlist[j];
	primes := primeslist[j];
	dim := dimlist[j];
	d := dlist[j];
	index := Ilist[j];
	min := minlist[j];


	printf "In total %o lattices to check.\n", NumberOfLattices(DB,dim);
	for i in [1..NumberOfLattices(DB,dim)] do
		printf "Checking lattice %o.\n", i;
		L := Lattice(DB,dim,i);

		if Determinant(L) mod det eq 0 and Minimum(L) ge min then // L may be sublattice of F
			"Possible sublattice found.";
			L := Dual(L);
			if not IsEven(L) then
				"Dual is not even.";
				"-------------------------------------------------------------";
				continue;
			end if;

			if not det mod Determinant(L) eq 0 then
				"Dual has no matching determinant.";
				"-------------------------------------------------------------";
				continue;
			end if;

		elif det mod Determinant(L) eq 0 then // L may be overlattice of F
			"Possible overlattice found.";
		else
			"Determinant doesnt match.";
			"-------------------------------------------------------------";
			continue;
		end if;

		quo := Integers() ! (det / Determinant(L));

		level := 0;
		for p in primes do
			level +:= Valuation(quo, p);
		end for;

		level := Round(level / 2);

		printf "Max-level %o.\n", level;

		"Computing automorphism group.";
		A := AutomorphismGroup(L);
		CA := ConjugacyClasses(A);

		X := [];
		for c in CA do
			if c[1] eq d then
				Append(~X,c[3]);
			end if;
		end for;

		printf "%o candidates for automorphism.\n", #X;

		for x in X do
			U := sub<A|x>;

			"Computing sublattices.";
			SU := Sublattices(U, primes : Levels := level, Limit := limit);
			if #SU eq limit then
				"!!! Needs further investigation; incomplete list of sublattices.";
			end if;

			printf "In total %o sublattices to check.\n", #SU;
			for S in SU do
				B := BasisMatrix(S);
				F := LatticeWithGram(B * RMatrixSpace(Integers(), dim, dim) ! GramMatrix(L) * Transpose(B));
				if IsEven(F) and Determinant(F) eq det and Minimum(F) ge min then

					new := true;
                    shortest := #ShortestVectors(F);
                    auto := #AutomorphismGroup(F);

                    for k in [1..#Lat] do
                        if NumShortest[k] ne shortest then
                        	continue;
                        end if;

                        if AutoSize[k] ne auto then
                       		continue;
                        end if;

                        if IsIsometric(Lat[k], F) then
                            new := false;
                            break;
                        end if;
                    end for;

                    if new then
						"!!! Found a candidate for F !!!";
						PrintFileMagma(Sprintf("%o_mod/%o_dim/F_%o_%o", l, n, index, counter), F);
						counter +:= 1;
						Append(~Lat, F);
						Append (~NumShortest, shortest);
						Append(~AutoSize, auto);
					end if;
				end if;
			end for;
		end for;

		"-------------------------------------------------------------";

	end for;
end for;